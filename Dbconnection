Step 1: Create DatabaseInitializer.java
Create a new class in your com.mecoder.emp_crud_project package (or wherever you prefer):

java
Copy code
package com.mecoder.emp_crud_project;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@Component
public class DatabaseInitializer {

    @PersistenceContext
    private EntityManager entityManager;

    @PostConstruct
    @Transactional
    public void initializeDatabase() {
        try {
            // Force creation of tables by persisting a temporary entity (if necessary)
            entityManager.createNativeQuery("SELECT 1").getSingleResult();
            System.out.println("Database tables creation attempted.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Step 2: Modify EmpCrudProjectApplication.java
Update your main application class to trigger the DatabaseInitializer:

java
Copy code
package com.mecoder.emp_crud_project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class EmpCrudProjectApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(EmpCrudProjectApplication.class, args);
        context.getBean(DatabaseInitializer.class).initializeDatabase();
    }
}
Explanation:
DatabaseInitializer Class:

@Component: Marks this class as a Spring-managed bean.
@PersistenceContext: Injects an EntityManager instance, which interacts directly with the database.
@PostConstruct: Ensures the method runs right after the bean initialization.
initializeDatabase() Method: Ensures tables are created by forcing a query execution.
EmpCrudProjectApplication Class:

SpringApplication.run(): Starts the application and initializes the Spring context.
context.getBean(DatabaseInitializer.class).initializeDatabase(): Calls the initializeDatabase() method right after the application starts to ensure the tables are created.
Final Steps:
Rebuild and Run Your Application: Make sure you run your application, and the tables should be created automatically in your database.

Check Your Database: After running, go to your MySQL client, use your database, and run SHOW TABLES; to see if the tables have been created.

Let me know if this solution helps!


3/3









