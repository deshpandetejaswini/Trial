I'll guide you through the steps required to set up your Spring Boot application with MySQL, Thymeleaf, and Java. I'll provide code for the entities, repositories, services, controllers, exception handling, and Thymeleaf templates. We'll also cover setting up the application.properties file for database configuration.

Step 1: Create the Entities (Model Classes)
1. Employee.java
java
Copy code
package com.example.employeemanagement.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class Employee {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String firstName;
    private String lastName;
    private String email;
    private LocalDate dateOfJoining;
    private double salary;

    @ManyToOne
    @JoinColumn(name = "department_id", nullable = false)
    private Department department;

    // Getters and Setters
}
2. Department.java
java
Copy code
package com.example.employeemanagement.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Department {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private String description;

    @OneToMany(mappedBy = "department")
    private List<Employee> employees;

    // Getters and Setters
}
3. Paycheck.java
java
Copy code
package com.example.employeemanagement.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class Paycheck {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    private double salary;
    private double taxAmount;
    private double netPay;
    private LocalDate payDate;

    // Getters and Setters
}
4. Tax.java
java
Copy code
package com.example.employeemanagement.model;

import javax.persistence.*;

@Entity
public class Tax {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    private int taxYear;
    private double totalIncome;
    private double taxPaid;

    // Getters and Setters
}
Step 2: Create Repositories (DB Interfaces)
1. EmployeeRepository.java
java
Copy code
package com.example.employeemanagement.repository;

import com.example.employeemanagement.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}
2. DepartmentRepository.java
java
Copy code
package com.example.employeemanagement.repository;

import com.example.employeemanagement.model.Department;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DepartmentRepository extends JpaRepository<Department, Long> {
}
3. PaycheckRepository.java
java
Copy code
package com.example.employeemanagement.repository;

import com.example.employeemanagement.model.Paycheck;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PaycheckRepository extends JpaRepository<Paycheck, Long> {
    double sumSalaryByEmployeeAndYear(Long employeeId, int year);
    double sumTaxByEmployeeAndYear(Long employeeId, int year);
}
4. TaxRepository.java
java
Copy code
package com.example.employeemanagement.repository;

import com.example.employeemanagement.model.Tax;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TaxRepository extends JpaRepository<Tax, Long> {
}
Step 3: Create Services
1. EmployeeService.java
java
Copy code
package com.example.employeemanagement.service;

import com.example.employeemanagement.model.Employee;
import com.example.employeemanagement.repository.EmployeeRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    private final EmployeeRepository employeeRepository;

    public EmployeeService(EmployeeRepository employeeRepository) {
        this.employeeRepository = employeeRepository;
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}
2. PaycheckService.java
java
Copy code
package com.example.employeemanagement.service;

import com.example.employeemanagement.model.Employee;
import com.example.employeemanagement.model.Paycheck;
import com.example.employeemanagement.repository.PaycheckRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDate;

@Service
public class PaycheckService {

    private final PaycheckRepository paycheckRepository;

    public PaycheckService(PaycheckRepository paycheckRepository) {
        this.paycheckRepository = paycheckRepository;
    }

    public Paycheck generatePaycheck(Employee employee) {
        double taxAmount = calculateTax(employee.getSalary());
        double netPay = employee.getSalary() - taxAmount;

        Paycheck paycheck = new Paycheck();
        paycheck.setEmployee(employee);
        paycheck.setSalary(employee.getSalary());
        paycheck.setTaxAmount(taxAmount);
        paycheck.setNetPay(netPay);
        paycheck.setPayDate(LocalDate.now());

        return paycheckRepository.save(paycheck);
    }

    private double calculateTax(double salary) {
        // Example tax calculation
        if (salary <= 50000) {
            return salary * 0.1;
        } else if (salary <= 100000) {
            return salary * 0.2;
        } else {
            return salary * 0.3;
        }
    }
}
Step 4: Create Controllers
1. EmployeeController.java
java
Copy code
package com.example.employeemanagement.controller;

import com.example.employeemanagement.model.Employee;
import com.example.employeemanagement.service.EmployeeService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping("/employees")
public class EmployeeController {

    private final EmployeeService employeeService;

    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @GetMapping
    public String listEmployees(Model model) {
        model.addAttribute("employees", employeeService.getAllEmployees());
        return "employee-list";
    }

    @GetMapping("/new")
    public String createEmployeeForm(Model model) {
        model.addAttribute("employee", new Employee());
        return "employee-create";
    }

    @PostMapping
    public String saveEmployee(@ModelAttribute("employee") Employee employee) {
        employeeService.saveEmployee(employee);
        return "redirect:/employees";
    }

    @GetMapping("/delete/{id}")
    public String deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return "redirect:/employees";
    }
}
Step 5: Exception Handling
GlobalExceptionHandler.java
java
Copy code
package com.example.employeemanagement.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public String handleException() {
        return "error"; // Thymeleaf template for error page
    }
}
Step 6: Thymeleaf Templates
1. employee-list.html
html
Copy code
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Employee List</title>
</head>
<body>
<h1>Employee List</h1>
<table>
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Department</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    <tr th:each="employee : ${employees}">
        <td th:text="${employee.firstName}"></td>
        <td th:text="${employee.lastName}"></td>
        <td th:text="${employee.email}"></td>
        <td th:text="${employee.department.name}"></td>
        <td>
            <a th:href="@{/employees/delete/{id}(id=${employee.id})}">Delete</a>
        </td>
    </tr>
    </tbody>
</table>
<a href="/employees/new">Create New Employee</a>
</body>
</html>
2. employee-create.html
html
Copy code
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Create Employee</title>
</head>
<body>
<h1>Create Employee</h1>
<form th:action="@{/employees}" th:object="${employee}" method="post">
    <label for="firstName">First Name:</label>
    <input type="text" id="firstName" th:field="*{firstName}">
    <label for="lastName">Last Name:</label>
    <input type="text" id="lastName" th:field="*{lastName}">
    <label for="email">Email:</label>
    <input type="email" id="email" th:field="*{email}">
    <label for="department">Department:</label>
    <select id="department" th:field="*{department.id}">
        <option th:each="department : ${departments}" th:value="${department.id}"
                th:text="${department.name}"></option>
    </select>
    <label for="salary">Salary:</label>
    <input type="number" id="salary" th:field="*{salary}">
    <button type="submit">Save</button>
</form>
</body>
</html>
Step 7: Configure application.properties
Make sure your application.properties has the correct MySQL configuration:

properties
Copy code
spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=root
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
Step 8: Testing and Running
Run Your Spring Boot Application: Launch the application using your IDE or by running the main() method in the @SpringBootApplication class.
Test Your Application: Access the application via the browser (e.g., http://localhost:8080/employees). You should be able to create, view, and delete employees using the provided UI.
This should give you a complete and functional Employee Management System with all the features you need!

You said:
This all is ohk but i havent created ant tables in my database .....please tell me all the things taht i shouls write in my atabase
ChatGPT said:
ChatGPT
Great! Since you are using Spring Boot with JPA and Hibernate, Spring Boot can automatically create your tables in MySQL for you based on the entity classes. This is handled by Hibernate, which will map the Java entities to database tables.

How to Auto-Generate Tables in MySQL
If you want Spring Boot to handle table creation for you, ensure the following property is set in your application.properties file:

properties
Copy code
spring.jpa.hibernate.ddl-auto=update
This configuration will let Hibernate create or update tables in the database automatically based on your entity classes whenever the application starts.

When you run your Spring Boot application, the tables (Employee, Department, Paycheck, and Tax) will be automatically created in your MySQL database according to the structure defined in the entity classes.

Manual SQL Scripts (If You Want to Create Tables Manually)
If you prefer to create the tables manually in MySQL, here are the SQL scripts:

1. Create Department Table
sql
Copy code
CREATE TABLE department (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255)
);
2. Create Employee Table
sql
Copy code
CREATE TABLE employee (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    date_of_joining DATE NOT NULL,
    salary DOUBLE NOT NULL,
    department_id BIGINT NOT NULL,
    FOREIGN KEY (department_id) REFERENCES department(id)
);
3. Create Paycheck Table
sql
Copy code
CREATE TABLE paycheck (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    employee_id BIGINT NOT NULL,
    salary DOUBLE NOT NULL,
    tax_amount DOUBLE NOT NULL,
    net_pay DOUBLE NOT NULL,
    pay_date DATE NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employee(id)
);
4. Create Tax Table
sql
Copy code
CREATE TABLE tax (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    employee_id BIGINT NOT NULL,
    tax_year INT NOT NULL,
    total_income DOUBLE NOT NULL,
    tax_paid DOUBLE NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employee(id)
);
Steps to Execute the SQL Scripts
Open MySQL Workbench or any MySQL Client.
Select Your Database: Make sure you are connected to your database.
Execute the SQL Scripts: Copy and paste the above SQL scripts into your query window and run them.
This will manually create the necessary tables in your database.

Notes
If you let Spring Boot handle the creation of the tables using spring.jpa.hibernate.ddl-auto=update, you don't need to write any SQL scripts.
You can verify the tables are created by checking your MySQL database after running the application.
Let me know if you'd like to go with auto-generation or manual table creation, and if you need further customization.





You said:
